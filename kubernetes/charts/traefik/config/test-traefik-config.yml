---
image:
  # -- Traefik image host registry  (https://hub.docker.com/_/traefik)
  registry: docker.io
  # -- Traefik image repository
  repository: traefik
  # -- Explicitly specifying the newer version 3.0
  tag: "v3.0.0-beta3"
  # -- Traefik image pull policy
  pullPolicy: IfNotPresent

# -- Add additional label to all resources
commonLabels: {}

#
# Configure the deployment
#
deployment:
  # -- Enable deployment
  enabled: true
  # -- Deployment or DaemonSet
  kind: Deployment
  #####################################################################################################################
  # 'replicas:null' NEEDS To Be Specified Here For Horizontal Pod Scaling Configured Further Down When HPA Is Enabled #
  #####################################################################################################################
  # -- Number of pods of the deployment (only applies when kind == Deployment)
  replicas: 1
  # -- Number of old history to retain to allow rollback (If not set, default Kubernetes value is set to 10)
  # revisionHistoryLimit: 1
  # -- Amount of time (in seconds) before Kubernetes will send the SIGKILL signal if Traefik does not shut down
  terminationGracePeriodSeconds: 60
  # -- The minimum number of seconds Traefik needs to be up and running before the DaemonSet/Deployment controller considers it available
  minReadySeconds: 5
  ## Override the liveness/readiness port. This is useful to integrate traefik
  ## with an external Load Balancer that performs healthchecks.
  ## Default: ports.traefik.port
  # healthchecksPort: 9000
  ## Override the liveness/readiness scheme. Useful for getting ping to
  ## respond on websecure entryPoint.
  # healthchecksScheme: HTTPS
  # -- Additional deployment annotations (e.g. for jaeger-operator sidecar injection)
  annotations: {}
  # -- Additional deployment labels (e.g. for filtering deployment by custom labels)
  labels: {}
  # -- Additional pod annotations (e.g. for mesh injection or prometheus scraping)
  podAnnotations: {}
  # -- Additional Pod labels (e.g. for filtering Pod by custom labels)
  podLabels: {}
  # -- Additional containers (e.g. for metric offloading sidecars)
  additionalContainers: []
  # https://docs.datadoghq.com/developers/dogstatsd/unix_socket/?tab=host
  # - name: socat-proxy
  #   image: alpine/socat:1.0.5
  #   args: ["-s", "-u", "udp-recv:8125", "unix-sendto:/socket/socket"]
  #   volumeMounts:
  #     - name: dsdsocket
  #       mountPath: /socket
  # -- Additional volumes available for use with initContainers and additionalContainers
  additionalVolumes: []
  # - name: dsdsocket
  #   hostPath:
  #     path: /var/run/statsd-exporter
  # -- Additional initContainers (e.g. for setting file permission as shown below)
  initContainers:
  # The "volume-permissions" init container is required if you run into permission issues.
  # Related issue: https://github.com/traefik/traefik-helm-chart/issues/396
   - name: volume-permissions
     image: busybox:latest
     command: [
               "sh",
               "-c",
               "touch /ssl-certs/acme-cloudflare.json; touch /ssl-certs/acme-staging.json; touch /ssl-certs/acme-production.json; chmod -vR 600 /ssl-certs"
              ]
     securityContext:
       runAsNonRoot: true
       runAsGroup: 65532
       runAsUser: 65532
     volumeMounts:
       - name: ssl-certs
         mountPath: /ssl-certs
  # -- Use process namespace sharing
  shareProcessNamespace: false
  # -- Custom pod DNS policy. Apply if `hostNetwork: true`
  # dnsPolicy: ClusterFirstWithHostNet
  dnsConfig: {}
  # nameservers:
  #   - 192.0.2.1 # this is an example
  # searches:
  #   - ns1.svc.cluster-domain.example
  #   - my.dns.search.suffix
  # options:
  #   - name: ndots
  #     value: "2"
  #   - name: edns0
  # -- Additional imagePullSecrets
  imagePullSecrets: []
  # - name: myRegistryKeySecretName
  # -- Pod lifecycle actions
  lifecycle: {}
  # preStop:
  #   exec:
  #     command: ["/bin/sh", "-c", "sleep 40"]
  # postStart:
  #   httpGet:
  #     path: /ping
  #     port: 9000
  #     host: localhost
  #     scheme: HTTP

# -- Pod disruption budget
podDisruptionBudget:
  enabled: false
  # maxUnavailable: 1
  # maxUnavailable: 33%
  # minAvailable: 0
  # minAvailable: 25%

# -- Create a default IngressClass for Traefik
ingressClass:
  enabled: true
  isDefaultClass: true
  # name: my-custom-class

# Traefik experimental features
experimental:
  plugins:
    # -- Enable traefik experimental plugins
    enabled: false
  kubernetesGateway:
    # -- Enable traefik experimental GatewayClass CRD
    enabled: false
    gateway:
      # -- Enable traefik regular kubernetes gateway
      enabled: true
      # certificate:
      #   group: "core"
      #   kind: "Secret"
      #   name: "secret"
      # -- By default, Gateway would be created to the Namespace you are deploying Traefik to.
      # You may create that Gateway in another namespace, setting its name below:
      # namespace: default
      # Additional gateway annotations (e.g. for cert-manager.io/issuer)
      # annotations:
      #   cert-manager.io/issuer: letsencrypt

# This is going to be disabled by default as we create an ingress file (003-traefik-ingress.yml)
ingressRoute:
  dashboard:
    enabled: false
  healthcheck:
    enabled: false

updateStrategy:
  # -- Customize updateStrategy: RollingUpdate or OnDelete
  type: RollingUpdate
  rollingUpdate:
    maxUnavailable: 0
    maxSurge: 1

readinessProbe:
  # -- The number of consecutive failures allowed before considering the probe as failed.
  failureThreshold: 2
  # -- The number of seconds to wait before starting the first probe.
  initialDelaySeconds: 5
  # -- The number of seconds to wait between consecutive probes.
  periodSeconds: 10
  # -- The minimum consecutive successes required to consider the probe successful.
  successThreshold: 3
  # -- The number of seconds to wait for a probe response before considering it as failed.
  timeoutSeconds: 2
livenessProbe:
  # -- The number of consecutive failures allowed before considering the probe as failed.
  failureThreshold: 3
  # -- The number of seconds to wait before starting the first probe.
  initialDelaySeconds: 5
  # -- The number of seconds to wait between consecutive probes.
  periodSeconds: 10
  # -- The minimum consecutive successes required to consider the probe successful.
  successThreshold: 3
  # -- The number of seconds to wait for a probe response before considering it as failed.
  timeoutSeconds: 2

providers:
  kubernetesCRD:
    # -- Load Kubernetes IngressRoute provider
    enabled: true
    # -- Allows IngressRoute to reference resources in namespace other than theirs
    allowCrossNamespace: false
    # -- Allows to reference ExternalName services in IngressRoute
    allowExternalNameServices: false
    # -- Allows to return 503 when there is no endpoints available
    allowEmptyServices: false
    # ingressClass: traefik-internal
    # labelSelector: environment=production,method=traefik
    # -- Array of namespaces to watch. If left empty, Traefik watches all namespaces.
    namespaces: []
    # - "default"

  kubernetesIngress:
    # -- Load Kubernetes Ingress provider
    enabled: true
    # -- Allows to reference ExternalName services in Ingress
    #####################################################################################################################
    #           This will be USEFUL for referencing external services such as admin portals for other systems           #
    #####################################################################################################################
    allowExternalNameServices: false
    # -- Allows to return 503 when there is no endpoints available
    allowEmptyServices: false
    # ingressClass: traefik-internal
    # labelSelector: environment=production,method=traefik
    # -- Array of namespaces to watch. If left empty, Traefik watches all namespaces.
    namespaces: []
    # - "default"
    # IP used for Kubernetes Ingress endpoints
    publishedService:
      enabled: false
      # Published Kubernetes Service to copy status from. Format: namespace/servicename
      # By default this Traefik service
      # pathOverride: ""

#
# -- Add volumes to the traefik pod. The volume name will be passed to tpl.
# This can be used to mount a cert pair or a configmap that holds a config.toml file.
# After the volume has been mounted, add the configs into traefik by using the `additionalArguments` list below, eg:
# `additionalArguments:
# - "--providers.file.filename=/config/dynamic.toml"
# - "--ping"
# - "--ping.entrypoint=web"`
volumes:
  - name: ssl-certs
    mountPath: "/ssl-certs"
    persistentVolumeClaim:
      claimName: traefik-certs-claim
# - name: public-cert
#   mountPath: "/certs"
#   type: secret
# - name: '{{ printf "%s-configs" .Release.Name }}'
#   mountPath: "/config"
#   type: configMap

# -- Additional volumeMounts to add to the Traefik container
additionalVolumeMounts: []
# -- For instance when using a logshipper for access logs
# - name: traefik-logs
#   mountPath: /var/log/traefik

logs:
  general:
    # -- By default, the logs use a text format (common), but you can
    # also ask for the json format in the format option
    # format: json
    # By default, the level is set to ERROR.
    # -- Alternative logging levels are DEBUG, PANIC, FATAL, ERROR, WARN, and INFO.
    level: ERROR
  access:
    # -- To enable access logs
    enabled: false
    ## By default, logs are written using the Common Log Format (CLF) on stdout.
    ## To write logs in JSON, use json in the format option.
    ## If the given format is unsupported, the default (CLF) is used instead.
    # format: json
    # filePath: "/var/log/traefik/access.log
    ## To write the logs in an asynchronous fashion, specify a bufferingSize option.
    ## This option represents the number of log lines Traefik will keep in memory before writing
    ## them to the selected output. In some cases, this option can greatly help performances.
    # bufferingSize: 100
    ## Filtering
    # -- https://docs.traefik.io/observability/access-logs/#filtering
    filters: {}
    # statuscodes: "200,300-302"
    # retryattempts: true
    # minduration: 10ms
    fields:
      general:
        # -- Available modes: keep, drop, redact.
        defaultmode: keep
        # -- Names of the fields to limit.
        names: {}
        ## Examples:
        # ClientUsername: drop
      headers:
        # -- Available modes: keep, drop, redact.
        defaultmode: drop
        # -- Names of the headers to limit.
        names: {}
        ## Examples:
        # User-Agent: redact
        # Authorization: drop
        # Content-Type: keep

metrics:
  ## -- Prometheus is enabled by default.
  ## -- It can be disabled by setting "prometheus: null"
  prometheus:
    # -- Entry point used to expose metrics.
    entryPoint: metrics
    ## Enable metrics on entry points. Default=true
    # addEntryPointsLabels: false
    ## Enable metrics on routers. Default=false
    # addRoutersLabels: true
    ## Enable metrics on services. Default=true
    # addServicesLabels: false
    ## Buckets for latency metrics. Default="0.1,0.3,1.2,5.0"
    # buckets: "0.5,1.0,2.5"
    ## When manualRouting is true, it disables the default internal router in
    ## order to allow creating a custom router for prometheus@internal service.
    # manualRouting: true
  #  datadog:
  #    ## Address instructs exporter to send metrics to datadog-agent at this address.
  #    address: "127.0.0.1:8125"
  #    ## The interval used by the exporter to push metrics to datadog-agent. Default=10s
  #    # pushInterval: 30s
  #    ## The prefix to use for metrics collection. Default="traefik"
  #    # prefix: traefik
  #    ## Enable metrics on entry points. Default=true
  #    # addEntryPointsLabels: false
  #    ## Enable metrics on routers. Default=false
  #    # addRoutersLabels: true
  #    ## Enable metrics on services. Default=true
  #    # addServicesLabels: false
  #  influxdb:
  #    ## Address instructs exporter to send metrics to influxdb at this address.
  #    address: localhost:8089
  #    ## InfluxDB's address protocol (udp or http). Default="udp"
  #    protocol: udp
  #    ## InfluxDB database used when protocol is http. Default=""
  #    # database: ""
  #    ## InfluxDB retention policy used when protocol is http. Default=""
  #    # retentionPolicy: ""
  #    ## InfluxDB username (only with http). Default=""
  #    # username: ""
  #    ## InfluxDB password (only with http). Default=""
  #    # password: ""
  #    ## The interval used by the exporter to push metrics to influxdb. Default=10s
  #    # pushInterval: 30s
  #    ## Additional labels (influxdb tags) on all metrics.
  #    # additionalLabels:
  #    #   env: production
  #    #   foo: bar
  #    ## Enable metrics on entry points. Default=true
  #    # addEntryPointsLabels: false
  #    ## Enable metrics on routers. Default=false
  #    # addRoutersLabels: true
  #    ## Enable metrics on services. Default=true
  #    # addServicesLabels: false
  #  influxdb2:
  #    ## Address instructs exporter to send metrics to influxdb v2 at this address.
  #    address: localhost:8086
  #    ## Token with which to connect to InfluxDB v2.
  #    token: xxx
  #    ## Organisation where metrics will be stored.
  #    org: ""
  #    ## Bucket where metrics will be stored.
  #    bucket: ""
  #    ## The interval used by the exporter to push metrics to influxdb. Default=10s
  #    # pushInterval: 30s
  #    ## Additional labels (influxdb tags) on all metrics.
  #    # additionalLabels:
  #    #   env: production
  #    #   foo: bar
  #    ## Enable metrics on entry points. Default=true
  #    # addEntryPointsLabels: false
  #    ## Enable metrics on routers. Default=false
  #    # addRoutersLabels: true
  #    ## Enable metrics on services. Default=true
  #    # addServicesLabels: false
  #  statsd:
  #    ## Address instructs exporter to send metrics to statsd at this address.
  #    address: localhost:8125
  #    ## The interval used by the exporter to push metrics to influxdb. Default=10s
  #    # pushInterval: 30s
  #    ## The prefix to use for metrics collection. Default="traefik"
  #    # prefix: traefik
  #    ## Enable metrics on entry points. Default=true
  #    # addEntryPointsLabels: false
  #    ## Enable metrics on routers. Default=false
  #    # addRoutersLabels: true
  #    ## Enable metrics on services. Default=true
  #    # addServicesLabels: false
  #  openTelemetry:
  #    ## Address of the OpenTelemetry Collector to send metrics to.
  #    address: "localhost:4318"
  #    ## Enable metrics on entry points.
  #    addEntryPointsLabels: true
  #    ## Enable metrics on routers.
  #    addRoutersLabels: true
  #    ## Enable metrics on services.
  #    addServicesLabels: true
  #    ## Explicit boundaries for Histogram data points.
  #    explicitBoundaries:
  #      - "0.1"
  #      - "0.3"
  #      - "1.2"
  #      - "5.0"
  #    ## Additional headers sent with metrics by the reporter to the OpenTelemetry Collector.
  #    headers:
  #      foo: bar
  #      test: test
  #    ## Allows reporter to send metrics to the OpenTelemetry Collector without using a secured protocol.
  #    insecure: true
  #    ## Interval at which metrics are sent to the OpenTelemetry Collector.
  #    pushInterval: 10s
  #    ## Allows to override the default URL path used for sending metrics. This option has no effect when using gRPC transport.
  #    path: /foo/v1/traces
  #    ## Defines the TLS configuration used by the reporter to send metrics to the OpenTelemetry Collector.
  #    tls:
  #      ## The path to the certificate authority, it defaults to the system bundle.
  #      ca: path/to/ca.crt
  #      ## The path to the public certificate. When using this option, setting the key option is required.
  #      cert: path/to/foo.cert
  #      ## The path to the private key. When using this option, setting the cert option is required.
  #      key: path/to/key.key
  #      ## If set to true, the TLS connection accepts any certificate presented by the server regardless of the hostnames it covers.
  #      insecureSkipVerify: true
  #    ## This instructs the reporter to send metrics to the OpenTelemetry Collector using gRPC.
  #    grpc: true

  ## -- enable optional CRDs for Prometheus Operator
  ##
  ## Create a dedicated metrics service for use with ServiceMonitor
  #  service:
  #    enabled: false
  #    labels: {}
  #    annotations: {}
  ## When set to true, it won't check if Prometheus Operator CRDs are deployed
  #  disableAPICheck: false
  #  serviceMonitor:
  #    metricRelabelings: []
  #      - sourceLabels: [__name__]
  #        separator: ;
  #        regex: ^fluentd_output_status_buffer_(oldest|newest)_.+
  #        replacement: $1
  #        action: drop
  #    relabelings: []
  #      - sourceLabels: [__meta_kubernetes_pod_node_name]
  #        separator: ;
  #        regex: ^(.*)$
  #        targetLabel: nodename
  #        replacement: $1
  #        action: replace
  #    jobLabel: traefik
  #    interval: 30s
  #    honorLabels: true
  #    # (Optional)
  #    # scrapeTimeout: 5s
  #    # honorTimestamps: true
  #    # enableHttp2: true
  #    # followRedirects: true
  #    # additionalLabels:
  #    #   foo: bar
  #    # namespace: "another-namespace"
  #    # namespaceSelector: {}
  #  prometheusRule:
  #    additionalLabels: {}
  #    namespace: "another-namespace"
  #    rules:
  #      - alert: TraefikDown
  #        expr: up{job="traefik"} == 0
  #        for: 5m
  #        labels:
  #          context: traefik
  #          severity: warning
  #        annotations:
  #          summary: "Traefik Down"
  #          description: "{{ $labels.pod }} on {{ $labels.nodename }} is down"

## Tracing
# -- https://doc.traefik.io/traefik/observability/tracing/overview/
tracing: {}
#  openTelemetry: # traefik v3+ only
#    grpc: {}
#    insecure: true
#    address: localhost:4317
# instana:
#   localAgentHost: 127.0.0.1
#   localAgentPort: 42699
#   logLevel: info
#   enableAutoProfile: true
# datadog:
#   localAgentHostPort: 127.0.0.1:8126
#   debug: false
#   globalTag: ""
#   prioritySampling: false
# jaeger:
#   samplingServerURL: http://localhost:5778/sampling
#   samplingType: const
#   samplingParam: 1.0
#   localAgentHostPort: 127.0.0.1:6831
#   gen128Bit: false
#   propagation: jaeger
#   traceContextHeaderName: uber-trace-id
#   disableAttemptReconnecting: true
#   collector:
#      endpoint: ""
#      user: ""
#      password: ""
# zipkin:
#   httpEndpoint: http://localhost:9411/api/v2/spans
#   sameSpan: false
#   id128Bit: true
#   sampleRate: 1.0
# haystack:
#   localAgentHost: 127.0.0.1
#   localAgentPort: 35000
#   globalTag: ""
#   traceIDHeaderName: ""
#   parentIDHeaderName: ""
#   spanIDHeaderName: ""
#   baggagePrefixHeaderName: ""
# elastic:
#   serverURL: http://localhost:8200
#   secretToken: ""
#   serviceEnvironment: ""

# -- Global command arguments to be passed to all traefik's pods
globalArguments:
- "--global.checknewversion"
- "--global.sendanonymoususage"

#
# Configure Traefik static configuration
# -- Additional arguments to be passed at Traefik's binary
# All available options available on https://docs.traefik.io/reference/static-configuration/cli/
## Use curly braces to pass values: `helm install --set="additionalArguments={--providers.kubernetesingress.ingressclass=traefik-internal,--log.level=DEBUG}"`
additionalArguments:
# Enables the API Handler which is needed for the service api@internal to work (Ingress Routes such as 003-traefik-dash-ingress.yml)
  - --api=true
####################### DNS Challenge With Cloudflare #######################
  - --entrypoints.websecure.http.tls.certresolver=cloudflare
  - --entrypoints.websecure.http.tls.domains[0].main=$(CF_MAIN_DOMAIN)
  - --entrypoints.websecure.http.tls.domains[0].sans=$(CF_SANS_DOMAIN)
  - --certificatesresolvers.cloudflare.acme.dnschallenge.provider=cloudflare
  - --certificatesresolvers.cloudflare.acme.email=$(CF_ACME_EMAIL)
  - --certificatesresolvers.cloudflare.acme.dnschallenge.resolvers=1.1.1.1,$(CF_LOCAL_RESOLVER)
  - --certificatesresolvers.cloudflare.acme.storage= /ssl-certs/acme-cloudflare.json
#####################  HTTP Challenge With LetsEncrypt #####################
# Staging
  - --certificatesresolvers.staging.acme.email=$(CF_ACME_EMAIL)
  - --certificatesresolvers.staging.acme.caServer=https://acme-staging-v02.api.letsencrypt.org/directory
  - --certificatesresolvers.staging.acme.httpChallenge.entryPoint=web
  - --certificatesresolvers.staging.acme.storage=/ssl-certs/acme-staging.json
# Production
  - --certificatesresolvers.production.acme.email=$(CF_ACME_EMAIL)
  - --certificatesresolvers.production.acme.caServer=https://acme-v02.api.letsencrypt.org/directory
  - --certificatesresolvers.production.acme.httpChallenge.entryPoint=web
  - --certificatesresolvers.production.acme.storage=/ssl-certs/acme-production.json

# -- Environment variables to be passed to Traefik's binary
env:
- name: POD_NAME
  valueFrom:
    fieldRef:
      fieldPath: metadata.name
- name: POD_NAMESPACE
  valueFrom:
    fieldRef:
      fieldPath: metadata.namespace
# DNS Challenge Credentials And ACME Email
- name: CF_API_EMAIL
  valueFrom:
    secretKeyRef:
      key: email
      name: cf-creds
- name: CF_DNS_API_TOKEN
  valueFrom:
    secretKeyRef:
      key: apiToken
      name: cf-creds
- name: CF_ACME_EMAIL
  valueFrom:
    secretKeyRef:
      key: acmeEmail
      name: cf-creds
- name: CF_LOCAL_RESOLVER
  valueFrom:
    secretKeyRef:
      key: localResolver
      name: cf-creds
- name: CF_MAIN_DOMAIN
  valueFrom:
    secretKeyRef:
      key: cfDomainMain
      name: cf-creds
- name: CF_SANS_DOMAIN
  valueFrom:
    secretKeyRef:
      key: cfDomainSANS
      name: cf-creds

# -- Environment variables to be passed to Traefik's binary from configMaps or secrets
envFrom: []
# - configMapRef:
#     name: config-map-name
# - secretRef:
#     name: secret-name

ports:
  traefik:
    port: 9001
    expose: false
    exposedPort: 9001
    protocol: TCP
    nodePort: 39001
    redirectTo: websecure
  web:
   # asDefault: true
    port: 8080
    expose: true
    exposedPort: 8080
    targetPort: 8080
    protocol: TCP
    nodePort: 38080
    redirectTo: websecure
    # Trust forwarded  headers information (X-Forwarded-*).
    # forwardedHeaders:
    #   trustedIPs: []
    #   insecure: false
    #
    # Enable the Proxy Protocol header parsing for the entry point
    # proxyProtocol:
    #   trustedIPs: []
    #   insecure: false
  websecure:
    # asDefault: true
    port: 8443
    expose: true
    exposedPort: 8443
    targetPort: 8443
    protocol: TCP
    nodePort: 38443
    appProtocol: https
    ## -- Enable HTTP/3 on the entrypoint
    ## Enabling it will also enable http3 experimental feature
    ## https://doc.traefik.io/traefik/routing/entrypoints/#http3
    ## There are known limitations when trying to listen on same ports for
    ## TCP & UDP (Http3). There is a workaround in this chart using dual Service.
    ## https://github.com/kubernetes/kubernetes/issues/47249#issuecomment-587960741
    http3:
      enabled: false
    # advertisedPort: 4443
    ## -- Trust forwarded  headers information (X-Forwarded-*).
    #forwardedHeaders:
    #  trustedIPs: []
    #  insecure: false
    ## -- Enable the Proxy Protocol header parsing for the entry point
    #proxyProtocol:
    #  trustedIPs: []
    #  insecure: false
    ## Set TLS at the entrypoint
    ## https://doc.traefik.io/traefik/routing/entrypoints/#tls
    tls:
      enabled: true
      # this is the name of a TLSOption definition
      options: ""
      certResolver: "cloudflare"
####################################################################################################################
#                            BELOW IS TAKEN CARE OF IN THE 'additionalArguments' FIELD                             #
####################################################################################################################
      domains: []
      # - main: example.com
      #   sans:
      #     - foo.example.com
      #     - bar.example.com


    # -- One can apply Middlewares on an entrypoint
    # https://doc.traefik.io/traefik/middlewares/overview/
    # https://doc.traefik.io/traefik/routing/entrypoints/#middlewares
    # -- /!\ It introduces here a link between your static configuration and your dynamic configuration /!\
    # It follows the provider naming convention: https://doc.traefik.io/traefik/providers/overview/#provider-namespace
    # middlewares:
    #   - namespace-name1@kubernetescrd
    #   - namespace-name2@kubernetescrd
    middlewares: []
  metrics:
    # -- When using hostNetwork, use another port to avoid conflict with node exporter:
    # https://github.com/prometheus/prometheus/wiki/Default-port-allocations
    port: 9100
    expose: true
    exposedPort: 9100
    protocol: TCP

# -- TLS Options are created as TLSOption CRDs
# https://doc.traefik.io/traefik/https/tls/#tls-options
# When using `labelSelector`, you'll need to set labels on tlsOption accordingly.
# Example:
# tlsOptions:
#   default:
#     labels: {}
#     sniStrict: true
#     preferServerCipherSuites: true
#   customOptions:
#     labels: {}
#     curvePreferences:
#       - CurveP521
#       - CurveP384
tlsOptions: {}

# -- TLS Store are created as TLSStore CRDs. This is useful if you want to set a default certificate
# https://doc.traefik.io/traefik/https/tls/#default-certificate
# Example:
# tlsStore:
#   default:
#     defaultCertificate:
#       secretName: tls-cert
tlsStore: {}

##############################################################################################
#                     This section is configured in traefik-service.yml                      #
##############################################################################################
service:
  enabled: true
  ## -- Single service is using `MixedProtocolLBService` feature gate.
  ## -- When set to false, it will create two Service, one for TCP and one for UDP.
  single: true
  type: LoadBalancer
  # -- Additional annotations applied to both TCP and UDP services (e.g. for cloud provider specific config)
  annotations: {}
  # -- Additional annotations for TCP service only
  annotationsTCP: {}
  # -- Additional annotations for UDP service only
  annotationsUDP: {}
  # -- Additional service labels (e.g. for filtering Service by custom labels)
  labels: {}
  # -- Additional entries here will be added to the service spec.
  # -- Cannot contain type, selector or ports entries.
  spec: {}
  # externalTrafficPolicy: Cluster
  # loadBalancerIP: "1.2.3.4"
  # clusterIP: "2.3.4.5"
  loadBalancerSourceRanges: []
  # - 192.168.0.1/32
  # - 172.16.0.0/16
  ## -- Class of the load balancer implementation
  # loadBalancerClass: service.k8s.aws/nlb
  externalIPs: []
  # - 1.2.3.4
  ## One of SingleStack, PreferDualStack, or RequireDualStack.
  # ipFamilyPolicy: SingleStack
  ## List of IP families (e.g. IPv4 and/or IPv6).
  ## ref: https://kubernetes.io/docs/concepts/services-networking/dual-stack/#services
  # ipFamilies:
  #   - IPv4
  #   - IPv6
  ##
  ## -- An additionnal and optional internal Service.
  ## Same parameters as external Service
  # internal:
  #   type: ClusterIP
  #   # labels: {}
  #   # annotations: {}
  #   # spec: {}
  #   # loadBalancerSourceRanges: []
  #   # externalIPs: []
  #   # ipFamilies: [ "IPv4","IPv6" ]

##############################################################################################################
#                               REPLICAS MUST BE SET TO 'NULL' FURTHER ABOVE                                 #
#   Disabling For Now Until A Certificate Issuer Is Deployed To Prevent Conflicts With HA And Let's Encrypt  #
##############################################################################################################
#autoscaling:
#  # -- Create HorizontalPodAutoscaler object.
#  enabled: true
#  minReplicas: 1
#  maxReplicas: 5
#  metrics:
#  - type: Resource
#    resource:
#       name: cpu
#       target:
#         type: Utilization
#         averageUtilization: 60
#  - type: Resource
#    resource:
#      name: memory
#      target:
#        type: Utilization
#        averageUtilization: 60
#  behavior:
#    scaleDown:
#      stabilizationWindowSeconds: 300
#      policies:
#      - type: Pods
#        value: 1
#        periodSeconds: 60

persistence:
  # -- Enable persistence using Persistent Volume Claims
  # ref: http://kubernetes.io/docs/user-guide/persistent-volumes/
  # It can be used to store TLS certificates, see `storage` in certResolvers
  enabled: true
  name: ssl-certs
  existingClaim: "traefik-certs-claim"
  path: /ssl-certs
  annotations: {}
  # -- Only mount a subpath of the Volume into the pod
  # subPath: ""

######################################################################################################################
#                  'certResolvers' SECTION IS TAKEN CARE OF UNDER THE 'additionalArguments' FIELD                    #
######################################################################################################################
certResolvers: {}
hostNetwork: false

# -- Whether Role Based Access Control objects like roles and rolebindings should be created
rbac:
  enabled: true
  # If set to false, installs ClusterRole and ClusterRoleBinding so Traefik can be used across namespaces.
  # If set to true, installs Role and RoleBinding. Providers will only watch target namespace.
  namespaced: false
  # Enable user-facing roles
  # https://kubernetes.io/docs/reference/access-authn-authz/rbac/#user-facing-roles
  # aggregateTo: [ "admin" ]

# -- Enable to create a PodSecurityPolicy and assign it to the Service Account via RoleBinding or ClusterRoleBinding
podSecurityPolicy:
  enabled: false

# -- The service account the pods will use to interact with the Kubernetes API
serviceAccount:
  # If set, an existing service account is used
  # If not set, a service account is created automatically using the fullname template
  name: ""

# -- Additional serviceAccount annotations (e.g. for oidc authentication)
serviceAccountAnnotations: {}

# -- The resources parameter defines CPU and memory requirements and limits for Traefik's containers.
resources:
  requests:
    cpu: "500m"
    memory: "300Mi"
  limits:
    cpu: "1000m"
    memory: "600Mi"

affinity: {} # useful for hostNetwork enabled

# -- nodeSelector is the simplest recommended form of node selection constraint.
nodeSelector: {}
# -- Tolerations allow the scheduler to schedule pods with matching taints.
tolerations: []
# -- You can use topology spread constraints to control
# how Pods are spread across your cluster among failure-domains.
topologySpreadConstraints: []
# This example topologySpreadConstraints forces the scheduler to put traefik pods
# on nodes where no other traefik pods are scheduled.
#  - labelSelector:
#      matchLabels:
#        app: '{{ template "traefik.name" . }}'
#    maxSkew: 1
#    topologyKey: kubernetes.io/hostname
#    whenUnsatisfiable: DoNotSchedule

# -- Pods can have priority.
# -- Priority indicates the importance of a Pod relative to other Pods.
priorityClassName: ""

# -- Set the container security context
# -- To run the container with ports below 1024 this will need to be adjusted to run as root
securityContext:
  capabilities:
    drop: [ALL]
  readOnlyRootFilesystem: true
  allowPrivilegeEscalation: false

podSecurityContext:
  # /!\ When setting fsGroup, Kubernetes will recursively change ownership and
  # permissions for the contents of each volume to match the fsGroup. This can
  # be an issue when storing sensitive content like TLS Certificates /!\
  # fsGroup: 65532
  # -- Specifies the policy for changing ownership and permissions of volume contents to match the fsGroup.
  fsGroupChangePolicy: "OnRootMismatch"
  # -- The ID of the group for all containers in the pod to run as.
  runAsGroup: 65532
  # -- Specifies whether the containers should run as a non-root user.
  runAsNonRoot: true
  # -- The ID of the user for all containers in the pod to run as.
  runAsUser: 65532
# -- Extra objects to deploy (value evaluated as a template)
#
# In some cases, it can avoid the need for additional, extended or adhoc deployments.
# See #595 for more details and traefik/tests/values/extra.yaml for example.
extraObjects: []
deployment:
  enabled: true
  #####################################################################################################################
  # 'replicas:null' NEEDS To Be Specified Here For Horizontal Pod Scaling Configured Further Down When HPA Is Enabled #
  #####################################################################################################################
  replicas: 3
  terminationGracePeriodSeconds: 60
  minReadySeconds: 0
  annotations: {}
  labels: {}
  podAnnotations: {}
  podLabels: {}
  additionalContainers: []
  additionalVolumes: []

  initContainers:
   - name: volume-permissions
     image: busybox:latest
     command: ["sh","-c","chmod -vR 600 /ssl-certs/*"]
     securityContext:
       runAsNonRoot: true
       runAsGroup: 65532
       runAsUser: 65532
     volumeMounts:
       - name: ssl-certs
         mountPath: /ssl-certs

ingressRoute:
  dashboard:
    enabled: false

providers:
  kubernetesCRD:
    enabled: true
    ingressClass: traefik-external
  kubernetesIngress:
    enabled: true
    publishedService:
      enabled: false

logs:
  general:
    level: INFO
  access:
    enabled: false
    filters: {}
    fields:
      general:
        defaultmode: keep
        names: {}
      headers:
        defaultmode: drop
        names: {}

metrics:
  prometheus:
    entryPoint: metrics

tracing: {}

globalArguments:
- "--global.checknewversion=true"
- "--global.sendanonymoususage=false"

additionalArguments:
- "--serversTransport.insecureSkipVerify=true"
####################### DNS Challenge With Cloudflare #######################
#  - "--entrypoints.websecure.http.tls.certresolver=cloudflare"                         ##################################### [ TESTING ] #####################################
#  - "--entrypoints.websecure.http.tls.domains[0].main=$(CF_MAIN_DOMAIN)"               ##################################### [ TESTING ] #####################################
#  - "--entrypoints.websecure.http.tls.domains[0].sans=$(CF_SANS_DOMAIN)"               ##################################### [ TESTING ] #####################################
#  - "--certificatesresolvers.cloudflare.acme.dnschallenge.provider=cloudflare"         ##################################### [ TESTING ] #####################################
#  - "--certificatesresolvers.cloudflare.acme.email=$(CF_API_EMAIL)"                    ##################################### [ TESTING ] #####################################
#  - "--certificatesresolvers.cloudflare.acme.dnschallenge.resolvers=1.1.1.1"           ##################################### [ TESTING ] #####################################
#  - "--certificatesresolvers.cloudflare.acme.storage=/ssl-certs/acme-cloudflare.json"  ##################################### [ TESTING ] #####################################
#####################  HTTP Challenge With LetsEncrypt #####################
# Staging
#  - --certificatesresolvers.staging.acme.email=$(CF_ACME_EMAIL)
#  - --certificatesresolvers.staging.acme.caServer=https://acme-staging-v02.api.letsencrypt.org/directory
#  - --certificatesresolvers.staging.acme.httpChallenge.entryPoint=web
#  - --certificatesresolvers.staging.acme.storage=/ssl-certs/acme-staging.json
# Production
#  - --certificatesresolvers.production.acme.email=$(CF_ACME_EMAIL)
#  - --certificatesresolvers.production.acme.caServer=https://acme-v02.api.letsencrypt.org/directory
#  - --certificatesresolvers.production.acme.httpChallenge.entryPoint=web
#  - --certificatesresolvers.production.acme.storage=/ssl-certs/acme-production.json

# DNS Challenge Credentials And ACME Email
#env:
# - name: CF_API_EMAIL
#   valueFrom:
#     secretKeyRef:
#       key: email
#       name: cf-creds
# - name: CF_API_KEY
#   valueFrom:
#     secretKeyRef:
#       key: apiKey
#       name: cf-creds
# - name: CF_MAIN_DOMAIN
#   valueFrom:
#     secretKeyRef:
#       key: cfDomainMain
#       name: cf-creds
# - name: CF_SANS_DOMAIN
#   valueFrom:
#     secretKeyRef:
#       key: cfDomainSANS
#       name: cf-creds
# -- Environment variables to be passed to Traefik's binary from configMaps or secrets
ports:
  web:
    # asDefault: true
    nodePort: 30080
    redirectTo: websecure
    # Trust forwarded  headers information (X-Forwarded-*).
    # forwardedHeaders:
    #   trustedIPs: []
    #   insecure: false
    #
    # Enable the Proxy Protocol header parsing for the entry point
    # proxyProtocol:
    #   trustedIPs:
    #     - 192.168.3.0/26
    #     - 172.18.0.0/16
    #   insecure: false
  websecure:
    # asDefault: true
    nodePort: 30443
    tls:
      enabled: true
#      certResolver: cloudflare

service:
  enabled: true
  type: LoadBalancer
  annotations: {}
  labels: {}
  spec: {}
  loadBalancerSourceRanges: []
  externalIPs:
    - 192.168.3.10

##############################################################################################################
#                               REPLICAS MUST BE SET TO 'NULL' FURTHER ABOVE                                 #
#   Disabling For Now Until A Certificate Issuer Is Deployed To Prevent Conflicts With HA And Let's Encrypt  #
##############################################################################################################
autoscaling:
#  # -- Create HorizontalPodAutoscaler object.
  enabled: false
#  minReplicas: 1
#  maxReplicas: 5
#  metrics:
#  - type: Resource
#    resource:
#       name: cpu
#       target:
#         type: Utilization
#         averageUtilization: 60
#  - type: Resource
#    resource:
#      name: memory
#      target:
#        type: Utilization
#        averageUtilization: 60
#  behavior:
#    scaleDown:
#      stabilizationWindowSeconds: 300
#      policies:
#      - type: Pods
#        value: 1
#        periodSeconds: 60

persistence:
  enabled: true
  name: ssl-certs
  existingClaim: "traefik-certs-claim"
  path: /ssl-certs
  annotations: {}

rbac:
  enabled: true

#resources:
# This will be implemented when the cert-manager is in place with auto-scaling enabled
#  requests:
#    cpu: "500m"
#    memory: "300Mi"
#  limits:
#    cpu: "1000m"
#    memory: "600Mi"
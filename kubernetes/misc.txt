------------------------------------------------------------------------------------------------------------------------
                            			Current Topology
------------------------------------------------------------------------------------------------------------------------
1) Two Load Balancers Clustered Running 'keepalived' and 'HAProxy'
   - Utilizing Virtual IP Failover For Load Balancers
   - Utilizing Round Robin Load Balancing For Master And Worker Nodes
2) Three Master Nodes Pointing To The Virtual IP As The Control Plane
3) Five Worker Nodes Pointing To The Virtual IP

------------------------------------------------------------------------------------------------------------------------
		                               Cluster-Stuff
------------------------------------------------------------------------------------------------------------------------
- control plane endpoint: k8s-load-balancer.homelab.lan
- pod network cidr: 172.18.0.0/16


------------------------------------------------------------------------------------------------------------------------
		                           Management Considerations
------------------------------------------------------------------------------------------------------------------------
- I believe I will go the route of creating 3 more VMs with Debian 12 installed and deploy a k3s cluster among those VMs. 

- The main reason being that I can then install Rancher on this cluster and import my current k8s cluster currently 
  already deployed on the other 8 VMs. 

- The main consideration into why I'm thinking of going this route is that in the future, I plan on separating out my 
  TrueNas Scale responsibilities once I have successfully migrated and deployed all services on the Proxmox k8s cluster 
  from the  TrueNas Scale system.

- This way, I can downsize the TrueNas Scale Server to be a much more reasonably specced machine with fewer cores and a
  lower RAM requirement with loads of external HBA connectors to a JBOD type setup and convert the current TrueNas server
  machine into a second Proxmox server that can serve as both HA for Proxmox as well as deploy a second k8s cluster for 
  Rancher to manage 
  - One thing to note is that the second cluster could join the first cluster via the first cluster's API endpoint, which,
    would make the services very easy to manage and deploy as well as highly scalable
  - However, another point is that I could make the second cluster it's own entity allowing me to make better use of 
    allocating services to specific nodes on either machine depending on their use case and divide tasking of machines.
    - The downside to this route though is that I'd then have to continue what I'm already currently doing with the load 
      balancers and edit the haproxy config to redirect URL requests to specific clusters and then have a reverse proxy 
      installed on each cluster (no big deal there) to resolve the URL to the service

- If I go this route, then all I'd have to do to make my environment more or less full proof, is add a few UPSs to the 
  mix for the local machines, especially the TrueNas server and disk arrays, and add an external TrueNas backup server.
  I would then have a way to have a HA local cloud setup that I can then even host a k8s cluster in the cloud as a backup
  from the local k8s cluster in the worst case scenario and still be able to host services for myself and my family/friends.
  - The storage considerations in that worst case scenario would involve setting up some sort of health check task and when
    my local servers become unreachable, start up the backup TrueNas server to act as the primary storage server and direct
    either the local clusters (if my local TrueNas is bricked) or the cloud cluster to use that backup server. Obviously, 
    speeds would be throttled due to the nature of the situation, but at least the services would still keep on running 
    after a small down time.
  - I wouldn't need to worry about the Proxmox machines going down affecting services too much either in this case, because
    I would have the cloud cluster take over primary responsibility automatically due to how kubernetes works and it would 
    just talk to the local or remote TrueNas servers, depending on the situation and logic applied in the script.

- I'm sure I might be missing some points to think about here, but I do believe that this is a pretty redundant setup that
  I could then reliably deploy services for friends and family and reliably ensure that they can ditch their paid plans. 
  I also believe that this would then allow me to get back to programming and wrap my own projects in manifests to test and
  deploy on my servers. The end goal is all about the cost-benefit analysis of services being paid for vs. setting all this 
  up as well as the surity of keeping my data and services highly available via off-site backups, my RAID-6 archive pool(s)
  (second one would be on the backup server) and the usage of multiple machines and cloud environment for hosting.